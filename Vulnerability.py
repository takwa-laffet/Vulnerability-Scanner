import socket
import requests
import subprocess
import nmap

from packaging import version

# Initialize Nmap scanner for open ports
nm = nmap.PortScanner()

# Define target URL and IP address
TARGET_URL = "TARGET_URL"
TARGET_IP = "TARGET_IP"
COMMON_PORTS = [21, 22, 80, 443, 8080]

def scan_open_ports(ip_address):
    print(f"Scanning open ports on {ip_address}...")
    for port in COMMON_PORTS:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex((ip_address, port))
                if result == 0:
                    print(f"Port {port} is open.")
        except Exception as e:
            print(f"Error scanning port {port}: {e}")

def check_outdated_software():
    # This is a placeholder for checking outdated software
    software_list = {
        "nginx": "1.18.0",
        "apache": "2.4.41"
    }

    for software, required_version in software_list.items():
        try:
            result = subprocess.run([software, "-v"], capture_output=True, text=True)
            output = result.stdout or result.stderr
            current_version = output.split()[2]  # Parse version from output
            if version.parse(current_version) < version.parse(required_version):
                print(f"{software} is outdated: {current_version} (requires {required_version} or newer)")
            else:
                print(f"{software} is up to date.")
        except Exception as e:
            print(f"Error checking version for {software}: {e}")

def scan_web_vulnerabilities(url):
    print(f"Scanning common web vulnerabilities for {url}...")
    
    # Check for directory traversal vulnerability
    traversal_payload = "/../../../../etc/passwd"
    response = requests.get(url + traversal_payload)
    if "root:" in response.text:
        print("Potential Directory Traversal vulnerability detected!")

    # Check for SQL Injection vulnerability
    sql_payload = "' OR '1'='1"
    response = requests.get(url + "?id=" + sql_payload)
    if "error" in response.text or "syntax" in response.text:
        print("Potential SQL Injection vulnerability detected!")

    # Check for XSS vulnerability
    xss_payload = "<script>alert('XSS')</script>"
    response = requests.get(url + "?search=" + xss_payload)
    if xss_payload in response.text:
        print("Potential XSS vulnerability detected!")

# Running the scanner
print("Starting vulnerability scan...\n")

# Open ports scan
scan_open_ports(TARGET_IP)

# Outdated software check
check_outdated_software()

# Web vulnerabilities scan
scan_web_vulnerabilities(TARGET_URL)

print("\nVulnerability scan completed.")
